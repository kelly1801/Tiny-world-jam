## Commit Message Rules

### 1. **Make Commits Atomic**

   - Commits should represent a single logical change or fix and be as small and focused as possible.
   - Avoid combining multiple unrelated changes in a single commit. Split them into separate commits.

### 2. **Use Meaningful Commit Messages**

   - Write clear and descriptive commit messages that explain the purpose of the change.
   - Start with a concise one-line summary of the change.

### 3. **Prefix Commit Messages**

   - Prefix commit messages to categorize them based on their purpose. Common prefixes include:
     - `[Feature]` for new features or enhancements.
     - `[Fix]` for bug fixes.
     - `[Refactor]` for code refactoring without functionality changes.
     - `[Style]` for code style/formatting changes.
     - `[Chore]` for maintenance tasks, build configuration changes, or other miscellaneous updates.

### 4. **Include Issue References**

   - Include issue or task references (e.g., GitHub issue numbers) in your commit messages.
   - This helps link commits to specific tasks or bug reports, making it easier to track changes.

### 5. **Describe the Why, Not Just the What**

   - In the commit message body, explain why the change is necessary and what problem it solves.

### 6. **Use Present Tense**

   - Write commit messages in the present tense, as if you are describing the change currently taking place.

### 7. **Keep Line Lengths Reasonable**

   - Keep commit message lines reasonably short (typically less than 72 characters) to ensure readability in various tools and interfaces.

### 8. **Commit Early and Often**

   - Commit frequently to your version control system to capture changes as they occur.
   - Smaller, incremental commits are easier to review and track than large, infrequent ones.

### 9. **Rebase and Clean Up Before Pushing (Only if have done it before)**

   - Before pushing your commits, rebase your branch to maintain a clean and linear commit history.
   - Squash or amend commits as necessary to ensure they meet the atomic and meaningful commit message criteria.
